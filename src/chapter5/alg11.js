/** 
 * 面试中的算法
 * 
 * 11、寻找缺失的整数
 * 
 * 问题：在一个无序数组里有99个不重复的正整数，范围是1 ~ 100，唯独缺少1个1 ~ 100中的整数。
 * 如何找出这个缺失的整数？
 * 思路：
 * 累加求和后依次减去数组中的整数，最后的结果就是缺失的整数
 * 
 * 扩展1：一个无序数组里有若干个正整数，范围是1 ~ 100，其中99个整数都出现了偶数次，只有一个整数出现了奇数次。
 * 如何找出这个出现奇数次的整数？
 * 思路：
 * 异或运算：在进行位运算时，相同位得0，不同位得1。
 * 利用异或运算，出现偶数次的数都互相抵消了，只有奇数次的数会被留下。时间复杂度 O(n)，空间复杂度 O(1)
 * 
 * 扩展2：假设一个无序数组里有若干个正整数，范围是1 ~ 100，其中98个整数出现了偶数次，只有两个整数出现了奇数次。
 * 如何找出这两个出现奇数次的整数？
 * 思路：
 * 利用分治法，首先将数组元素依次进行异或运算，得到的结果是两个出现奇数次整数的异或运算结果。在这个结果一定至少有一个结果是二进制1。
 * 
*/

function findLostNum(array) {
  // 用于存储2个出现奇数次的整数
  let result = [];
  // 第1次进行整体异或运算
  let xorResult = 0;
  for (let i = 0; i < array.length; i++) {
    xorResult ^= array[i]
  }
  // 如果进行异或运算结果为0，则说明输入的数组不符合要求
  if (xorResult === 0) {
    return null
  }
  // 确定两个整数的不同位，以此分组
  let separator = 1;
  while (0 === (xorResult&separator)) {
    separator<<=1
  }
  // 第二次分组进行进行异或运算
  for (let i = 0; i < array.length; i++) {
    if (0 === (array[i]&separator)) {
      result[0] ^= array[i]
    } else {
      result[1] ^= array[i]
    }
  }

  return result
}

const array = [4, 1, 2, 2, 5, 1, 4, 3];

console.log(findLostNum(array)) // [5, 3]
